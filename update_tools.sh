###############################################################################
# Update Tools - V0.2 by Robin Lennox #
###############################################################################

#!/bin/sh

#Global Variables
TOOLSDIRECTORY=~/Desktop/tools
HIGHLIGHT="#############################################################"

# Function
PRINT_MESSAGE(){
	exec >/dev/tty
	echo '\n'"`tput bold``tput setf 1`[*]`tput sgr0` $1"
	exec 1>/dev/null 2>/dev/null
}

PRINT_GOOD(){
	exec >/dev/tty
	echo "`tput bold``tput setf 2`[*]`tput sgr0` $1"
	exec 1>/dev/null 2>/dev/null
}

PRINT_ERROR(){
	exec >/dev/tty
	echo "`tput bold``tput setf 4`[*]`tput sgr0` $1"
	exec 1>/dev/null 2>/dev/null
}

PRINT_QUESTION(){
	exec >/dev/tty
	echo '\n'"`tput bold``tput setf 6`${HIGHLIGHT}`tput sgr0`"
	echo -n "`tput bold``tput setf 6`[*]`tput sgr0` $1"
	exec 1>/dev/null 2>/dev/null
}

# Disable output
exec 1>/dev/null 2>/dev/null

# Disable GNOME Keyring Control
unset GNOME_KEYRING_CONTROL

PRINT_MESSAGE "Update Tools Script"

# Make sure script is not run as root
if [ "$(id -u)" = "0" ]; then
   PRINT_ERROR "This script must not be run as root" 1>&2
   exit
fi

# Check if user can sudo
PRINT_GOOD "Prompt for Sudo Password"
sudo uptime
if [ $? != 0 ]; then
	PRINT_ERROR "Sudo Password not entered, exiting script."
	exit
fi

# Script prerequisites
for DEPENDPKG in build-essential curl git make subversion
do
	dpkg -s ${DEPENDPKG} 2>&1 | grep -o Installed-Size
	if [ $? != 0 ] ; then
		PRINT_GOOD "Install Script Dependency - ${DEPENDPKG}"
		sudo apt-get -y install ${DEPENDPKG}
	fi
done

# Update Ubuntu
PRINT_MESSAGE "Checking for Ubuntu updates"
sudo apt-get update
sudo apt-get -y upgrade | cut -d ' ' -f1-5 | grep -Eo '[1-9]'
if [ $? = 0 ] ; then
	PRINT_GOOD "Ubuntu updated"
else
	PRINT_GOOD "Ubuntu already up-to-date"
fi

# Install SQLmap
PRINT_MESSAGE "Checking for SQLmap updates"
cd "${TOOLSDIRECTORY}"
if [ ! -d ./sqlmap-dev/ ]; then
	PRINT_GOOD "Downloading SQLmap"
	git clone https://github.com/sqlmapproject/sqlmap.git ${TOOLSDIRECTORY}/sqlmap-dev
else
	cd ./sqlmap-dev/
	git pull | grep -o "Already up-to-date"
	if [ $? = 0 ] ; then
		PRINT_GOOD "SQLMap already up-to-date"
	else
		PRINT_GOOD "SQLMap updated"
	fi
fi

# SQLmap Dependencies
for DEPENDPKG in python-kinterbasdb python-pyodbc python-pymssql python-psycopg2 python-pysqlite2 python-pymssql python-dbg
do
	dpkg -s ${DEPENDPKG} 2>&1 | grep -o Installed-Size
	if [ $? != 0 ] ; then
		PRINT_GOOD "Install SQLmap Dependency - ${DEPENDPKG}"
		sudo apt-get -y install ${DEPENDPKG}
	fi
done

# Responder
PRINT_MESSAGE "Checking for Responder updates"
cd "${TOOLSDIRECTORY}"
if [ ! -d ./responder/ ]; then
	PRINT_GOOD "Downloading Responder"
	git clone https://github.com/SpiderLabs/Responder.git responder
else
	cd ./responder/
	git pull | grep -o "Already up-to-date"
	if [ $? = 0 ] ; then
		PRINT_GOOD "Responder already up-to-date"
	else
		PRINT_GOOD "Responder updated"
	fi
fi

# Responder Dependencies
for DEPENDPKG in python-openssl
do
	dpkg -s ${DEPENDPKG} 2>&1 | grep -o Installed-Size
	if [ $? != 0 ] ; then
		PRINT_GOOD "Install Responder Dependency - ${DEPENDPKG}"
		sudo apt-get -y install ${DEPENDPKG}
	fi
done

# Nikto
PRINT_MESSAGE "Checking for Nikto updates"
cd "${TOOLSDIRECTORY}"
if [ ! -d ./nikto/ ]; then
	PRINT_GOOD "Downloading Nikto"
	git clone https://github.com/sullo/nikto.git nikto
else
	cd ./nikto/
	git pull | grep -o "Already up-to-date"
	if [ $? = 0 ] ; then
		PRINT_GOOD "Nikto already up-to-date"
	else
		PRINT_GOOD "Nikto updated"
	fi
	
	# Update Database and plugins... Won't work until nikto2.1.6 is released
	./program/nikto.pl -update
fi

# Nmap Dependencies
PRINT_MESSAGE "Checking for Nmap updates"
for DEPENDPKG in autoconf build-essential libssl-dev libpathfinder-openssl-1 liblinear-dev libpcap0.8-dev libpcre3-dev
do
	dpkg -s ${DEPENDPKG} 2>&1 | grep -o Installed-Size
	if [ $? != 0 ] ; then
		PRINT_GOOD "Install Nmap Dependency - ${DEPENDPKG}"
		sudo apt-get -y install ${DEPENDPKG}
	fi
done

# NMap SVN #
#Local Variables
NMAPLOCATION="https://svn.nmap.org/nmap"
REMOTEVERSION=`svn info ${NMAPLOCATION} | grep Revision | cut -f 2 -d:`
LOCALVERSION=`svn status -u ${TOOLSDIRECTORY}/nmap/ | grep revision | cut -f 2 -d:`
EXIST=`which nmap | grep nmap`
#NMap Install Function
nmap_install()
{
		PRINT_GOOD "Downloading Nmap"
		svn co ${NMAPLOCATION}
		cd ./nmap/
		./configure
		make
		sudo make install clean
}
cd ${TOOLSDIRECTORY}
if [ ! -d ./nmap/ ]; then		
	nmap_install
elif [ "$EXIST" = "" ]; then
	PRINT_ERROR "NMap not installed. This needs to be redownloaded and complied"
	rm -rf ./nmap/
	nmap_install
elif [ "${LOCALVERSION}" -lt "${REMOTEVERSION}" ]; then #If Revision numbers	
	PRINT_ERROR "Running old Nmap"	
	cd "${TOOLSDIRECTORY}"/nmap
	PRINT_GOOD "Uninstalling old Nmap"
	sudo make uninstall
	svn up
	nmap_install
	PRINT_GOOD "Nmap updated"
else
	PRINT_GOOD "Nmap already up-to-date"
fi

# Metasploit
PRINT_MESSAGE "Checking for Metasploit updates"
# Metasploit Dependencies
for DEPENDPKG in build-essential libreadline-dev libssl-dev libpq5 libpq-dev libreadline5 libsqlite3-dev libpcap-dev openjdk-7-jre subversion git-core autoconf postgresql curl zlib1g-dev libxml2-dev libxslt1-dev xtightvncviewer libyaml-dev ruby1.9.3
do
	dpkg -s ${DEPENDPKG} 2>&1 | grep -o Installed-Size 
	if [ $? != 0 ] ; then
		PRINT_GOOD "Install Metasploit Dependency - ${DEPENDPKG}"
		sudo apt-get -y install ${DEPENDPKG}
	fi
done

for DEPENDPKG in wirble sqlite3 bundler pcaprub
do
	gem list ${DEPENDPKG} | grep ${DEPENDPKG} 
	if [ $? != 0 ] ; then
		PRINT_GOOD "Install Metasploit Gem Dependency - ${DEPENDPKG}"
		sudo gem install ${DEPENDPKG} 
	fi
done

# Install Metasploit
cd /opt/
if [ ! -d ./metasploit-framework/ ]; then
	PRINT_QUESTION "Enter password for MSF Postgres user [ENTER]: "
	read MSFPASS
	PRINT_GOOD "Downloading Metasploit"
	sudo git clone https://github.com/rapid7/metasploit-framework.git
	cd metasploit-framework/
	sudo bash -c 'for MSF in $(ls msf*); do ln -s /opt/metasploit-framework/${MSF} /usr/local/bin/${MSF};done'
	bundle install

	# Creating the MSF Database user msf with the password provided
	sudo -u postgres psql postgres -c "create role msf login password '${MSFPASS}'"

	# Creating msf database and setting the owner to msf user
	sudo -u postgres psql postgres -c "CREATE DATABASE msf OWNER msf;"

	POSTGRES_PORT=`cat /etc/postgresql/*/main/postgresql.conf | awk -F "port = " '{print $2}' | awk '{print $1}' | tr -s '\n' ' ' | tr -d ' '`
	sudo sh -c "echo 'production:
   adapter: postgresql
   database: msf
   username: msf
   password: ${MSFPASS}
   host: 127.0.0.1
   port: ${POSTGRES_PORT}
   pool: 75
   timeout: 5' > /opt/metasploit-framework/database.yml"

	sudo sh -c "echo export MSF_DATABASE_CONFIG=/opt/metasploit-framework/database.yml >> /etc/profile"

	cd /etc/postgresql/*/main/
	sudo cp ./postgresql.conf ./postgresql.conf_orig
	sudo sed -i -e 's/ssl = true/#ssl = true/g' ./postgresql.conf
	
	sudo /etc/init.d/postgresql restart
	echo "alias msfconsole='-E msfconsole -d db_connect -y /opt/metasploit-framework/database.yml'" >> ~/.bash_aliases
	echo "alias sudo='sudo '" >> ~/.bash_aliases
	PRINT_ERROR "Please logout before using Metasploit"
else
	sudo msfupdate | grep -o "Already up-to-date"
	if [ $? = 0 ] ; then
		PRINT_GOOD "Metasploit already up-to-date"
	else
		PRINT_GOOD "Metasploit updated"
	fi
fi

# Armitage
PRINT_MESSAGE "Checking for Armitage updates"
cd /usr/local/share/
if [ ! -d ./armitage/ ]; then
	PRINT_GOOD "Downloading Armitage"
	sudo svn checkout http://armitage.googlecode.com/svn/trunk/release/armitage-unix /usr/local/share/armitage/
	sudo sh -c "echo java -jar /usr/local/share/armitage/armitage.jar \$\* > /usr/local/share/armitage/armitage"
	sudo ln -s /usr/local/share/armitage/armitage /usr/local/bin/armitage
	echo "alias armitage='-E armitage'" >> ~/.bash_aliases
	PRINT_ERROR "Please logout and start once Metasploit before using Armitage"
else
	cd ./armitage/
	sudo svn up | grep -o "At revision"
	if [ $? = 0 ] ; then
		PRINT_GOOD "Armitage already up-to-date"
	else
		PRINT_GOOD "Armitage updated"
	fi
	sudo sh -c "echo java -jar /usr/local/share/armitage/armitage.jar \$\* > /usr/local/share/armitage/armitage"
fi

# THC Hydra
PRINT_MESSAGE "Checking for THC Hydra updates"
hydra_install()
{
		PRINT_GOOD "Install THC Hydra"
		rm -rf ${TOOLSDIRECTORY}/hydra*
		URL_PATH=`curl -Lk http://www.thc.org/thc-hydra/ 2>&1 | awk -F "The source code of state-of-the-art Hydra: " '{print $2}' | tr -s '\n' | sed -e 's/^<a href=["'"'"']//' -e 's/">.*//' | tr -s '\n' ' '`
		cd ${TOOLSDIRECTORY}
		curl -LkO ${URL_PATH}
		FILE=$(basename $URL_PATH)
		tar -xvf ${FILE}
		rm -rf ${FILE}
		cd ./hydra*
		sudo ./configure
		make
		sudo make install clean

}

# Install THC Hydra
which hydra | grep hydra
if [ $? != 0 ] ; then
	hydra_install
fi

# Check for update
for HYDRA_DIR in `find ${TOOLSDIRECTORY} -maxdepth 1 -type d -name *"hydra*" -print`
do
	rm /tmp/CHANGES # If file exists then delete
	timeout 10 wget --no-check-certificate -L http://www.thc.org/thc-hydra/CHANGES -P /tmp/
	diff /tmp/CHANGES $HYDRA_DIR/CHANGES
	if [ $? != 0 ]; then
		hydra_install
		PRINT_GOOD "THC Hydra updated"
	else
		PRINT_GOOD "THC Hydra already up-to-date"
	fi
done
