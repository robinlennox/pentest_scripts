###############################################################################
# Update Tools - V0.1 by Robin Lennox #
###############################################################################

# Need to do
# If site is down skip (SVN Repo) use CURL

#!/bin/sh

#Global Variables
TOOLSDIRECTORY=~/Desktop/tools

# Disable GNOME Keyring Control #
unset GNOME_KEYRING_CONTROL

# Script prerequisites #
for dependpkg in git subversion
do
	dpkg-query -W $dependpkg | grep $dependpkg > /dev/null
	if [ $? != 0 ] ; then
		echo        
		echo "Install Script Dependancy - "$dependpkg
		sudo apt-get -y install $dependpkg
	fi
done

# Update Ubuntu #
echo "Updating Ubuntu"
sudo apt-get update > /dev/null
sudo apt-get -y upgrade | tail -n 1
echo "Ubuntu updated."

# Install SQLmap # 
echo '\n'"Updating SQLmap"
cd "$TOOLSDIRECTORY"
if [ ! -d ./sqlmap-dev/ ]; then
	git clone https://github.com/sqlmapproject/sqlmap.git $TOOLSDIRECTORY/sqlmap-dev
else
	cd ./sqlmap-dev/
	git pull
fi

#Needed for SQLmap
for dependpkg in python-kinterbasdb python-pyodbc python-pymssql python-psycopg2 python-pysqlite2 python-pymssql python-dbg
do
	dpkg-query -W $dependpkg | grep $dependpkg > /dev/null
	if [ $? != 0 ] ; then
		echo        
		echo "Install SQLmap Dependancy - "$dependpkg
		sudo apt-get -y install $dependpkg
	fi
done

# Install Responder #
echo '\n'"Updating Responder"
cd "$TOOLSDIRECTORY"
if [ ! -d ./responder/ ]; then
	git clone https://github.com/SpiderLabs/Responder.git responder
else
	cd ./responder/
	git pull
fi

# Install Nikto #
echo '\n'"Updating Nikto"
cd "$TOOLSDIRECTORY"
if [ ! -d ./nikto/ ]; then
	git clone https://github.com/sullo/nikto.git nikto
else
	cd ./nikto/
	git pull
fi

# Update Database and plugins... Won't work until nikto2.1.6 is released
./program/nikto.pl -update

#Needed for Responder
dpkg-query -W python-openssl | grep python-openssl > /dev/null
if [ $? != 0 ] ; then
	echo        
	echo "Install Responder Dependancy - Python OpenSSL"
	sudo apt-get -y install python-openssl
fi

#Needed for Nmap
for dependpkg in build-essential libssl-dev libpathfinder-openssl-1 liblinear-dev libpcap0.8-dev libpcre3-dev
do
	dpkg-query -W $dependpkg | grep $dependpkg > /dev/null
	if [ $? != 0 ] ; then
		echo        
		echo "Install Nmap Dependancy - "$dependpkg
		sudo apt-get -y install $dependpkg
	fi
done

# Install NMap SVN #
echo 
echo "Checking Nmap Updates"
#Local Variables
NMAPLOCATION="https://svn.nmap.org/nmap"
REMOTEVERSION=`svn info $NMAPLOCATION | grep Revision | cut -f 2 -d:`
LOCALVERSION=`svn status -u $TOOLSDIRECTORY/nmap/ | grep revision | cut -f 2 -d:`
#NMap Install Function
nmap_install()
{
		svn co $NMAPLOCATION
		cd $TOOLSDIRECTORY/nmap/
		./configure
		make
		sudo make install clean
}

cd "$TOOLSDIRECTORY"
if [ ! -d ./nmap/ ]; then
	echo '\n'"Installing Nmap"		
	nmap_install
elif [ "$LOCALVERSION" -lt "$REMOTEVERSION" ]; then #If Revision numbers	
	cd "$TOOLSDIRECTORY"/nmap	
	echo '\n'"Uninstalling old Nmap"
	sudo make uninstall
	echo '\n'"Updating Nmap"
	svn up
	echo '\n'"Setting up and Installing Nmap"
	nmap_install
else
	echo "Already up-to-date."
fi

#Needed for Metasploit
for dependpkg in build-essential libreadline-dev libssl-dev libpq5 libpq-dev libreadline5 libsqlite3-dev libpcap-dev openjdk-7-jre subversion git-core autoconf postgresql curl zlib1g-dev libxml2-dev libxslt1-dev vncviewer libyaml-dev ruby1.9.3
do
	dpkg-query -W $dependpkg | grep $dependpkg > /dev/null
	if [ $? != 0 ] ; then        
		echo '\n'"Install Metasploit Dependancy - "$dependpkg
		sudo apt-get -y install $dependpkg
	fi
done

for dependpkg in wirble sqlite3 bundler pcaprub
do
	gem list $dependpkg | grep $dependpkg > /dev/null
	if [ $? != 0 ] ; then
		echo "Install Metasploit Gem Dependancy" $dependpkg
		sudo gem install $dependpkg
	fi
done

# Install Metasploit # 
echo '\n'"Updating Metasploit"
cd /opt/
if [ ! -d ./metasploit-framework/ ]; then
	echo -n "Enter password for MSF Postgres user [ENTER]: "
	read MSFPASS
	sudo git clone https://github.com/rapid7/metasploit-framework.git
	cd metasploit-framework/
	sudo bash -c 'for MSF in $(ls msf*); do ln -s /opt/metasploit-framework/$MSF /usr/local/bin/$MSF;done'
	bundle install

	# Creating the MSF Database user msf with the password provided
	sudo -u postgres psql postgres -c "create role msf login password '$MSFPASS'"

	# Creating msf database and setting the owner to msf user
	sudo -u postgres psql postgres -c "CREATE DATABASE msf OWNER msf;"

	POSTGRES_PORT=`cat /etc/postgresql/*/main/postgresql.conf | awk -F "port = " '{print $2}' | awk '{print $1}' | tr -s '\n' ' ' | tr -d ' '`
	sudo sh -c "echo 'production:
	   adapter: postgresql
	   database: msf
	   username: msf
	   password: ${MSFPASS}
	   host: 127.0.0.1
	   port: ${POSTGRES_PORT}
	   pool: 75
	   timeout: 5' > /opt/metasploit-framework/database.yml"

	sudo sh -c "echo export MSF_DATABASE_CONFIG=/opt/metasploit-framework/database.yml >> /etc/profile"

	cd /etc/postgresql/*/main/
	sudo cp ./postgresql.conf ./postgresql.conf_orig
	sudo sed -i -e 's/ssl = true/#ssl = true/g' ./postgresql.conf
	
	sudo /etc/init.d/postgresql restart
	echo "alias msfconsole='-E msfconsole -d db_connect -y /opt/metasploit-framework/database.yml'" >> ~/.bash_aliases
	echo "Restarted need for Metasploit"
else
	sudo msfupdate 2>&1 | tail -n 2
fi

# Check Armitage #
echo 
echo "Updating Armitage"
cd /usr/local/share/
if [ ! -d ./armitage/ ]; then
	sudo svn checkout http://armitage.googlecode.com/svn/trunk/release/armitage-unix /usr/local/share/armitage/
	sudo sh -c "echo java -jar /usr/local/share/armitage/armitage.jar \$\* > /usr/local/share/armitage/armitage"
	sudo ln -s /usr/local/share/armitage/armitage /usr/local/bin/armitage
	echo "alias armitage='-E armitage'" >> ~/.bash_aliases
	echo "Restarted need for Armitage"
else
	cd ./armitage/
	sudo svn up
fi

# Check THC Hydra #
echo 
echo "Checking THC Hydra"
## If Installed##
which hydra | grep hydra > /dev/null
if [ $? != 0 ] ; then
	echo        
	echo "Hydra not installed. This needs to be complied"
fi

## If needs Update ##
for HYDRA_DIR in `find $TOOLSDIRECTORY -maxdepth 1 -type d -name *"hydra*" -print`
do
	rm /tmp/CHANGES > /dev/null 2>&1 # If file exists then delete
	timeout 10 wget --no-check-certificate -L http://www.thc.org/thc-hydra/CHANGES -P /tmp/ 2> /dev/null
	diff /tmp/CHANGES $HYDRA_DIR/CHANGES > /dev/null
	if [ $? != 0 ] ; then
		echo '\n'"Hydra has been updated. Redownload and recomplied"
		echo "Update Tools Script"
		#TEST=`curl http://www.thc.org/thc-hydra/ 2>&1 | awk -F "The source code of state-of-the-art Hydra: " '{print $2}' | tr -s '\n' | sed -e 's/^<a href=["'"'"']//' -e 's/">.*//' | tail -n +2`
		#wget ${TEST}
	else
		echo "Already up-to-date."
	fi
done
